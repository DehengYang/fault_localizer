2020-03-19 23:15:53 DEBUG FileParser:132 - ---
root(Type=CompilationUnit): 
    packageDeclaration(Type=PackageDeclaration): 
        name(Type=Name): 
            identifier: "jscomp"
            qualifier(Type=Name): 
                identifier: "javascript"
                qualifier(Type=Name): 
                    identifier: "google"
                    qualifier(Type=Name): 
                        identifier: "com"
    comment(Type=BlockComment): 
        content: "\n * Copyright 2008 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n "
    imports: 
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "Joiner"
                qualifier(Type=Name): 
                    identifier: "base"
                    qualifier(Type=Name): 
                        identifier: "common"
                        qualifier(Type=Name): 
                            identifier: "google"
                            qualifier(Type=Name): 
                                identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "Preconditions"
                qualifier(Type=Name): 
                    identifier: "base"
                    qualifier(Type=Name): 
                        identifier: "common"
                        qualifier(Type=Name): 
                            identifier: "google"
                            qualifier(Type=Name): 
                                identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "Lists"
                qualifier(Type=Name): 
                    identifier: "collect"
                    qualifier(Type=Name): 
                        identifier: "common"
                        qualifier(Type=Name): 
                            identifier: "google"
                            qualifier(Type=Name): 
                                identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "Sets"
                qualifier(Type=Name): 
                    identifier: "collect"
                    qualifier(Type=Name): 
                        identifier: "common"
                        qualifier(Type=Name): 
                            identifier: "google"
                            qualifier(Type=Name): 
                                identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "AbstractCfgNodeTraversalCallback"
                qualifier(Type=Name): 
                    identifier: "ControlFlowGraph"
                    qualifier(Type=Name): 
                        identifier: "jscomp"
                        qualifier(Type=Name): 
                            identifier: "javascript"
                            qualifier(Type=Name): 
                                identifier: "google"
                                qualifier(Type=Name): 
                                    identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "Branch"
                qualifier(Type=Name): 
                    identifier: "ControlFlowGraph"
                    qualifier(Type=Name): 
                        identifier: "jscomp"
                        qualifier(Type=Name): 
                            identifier: "javascript"
                            qualifier(Type=Name): 
                                identifier: "google"
                                qualifier(Type=Name): 
                                    identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "FlowState"
                qualifier(Type=Name): 
                    identifier: "DataFlowAnalysis"
                    qualifier(Type=Name): 
                        identifier: "jscomp"
                        qualifier(Type=Name): 
                            identifier: "javascript"
                            qualifier(Type=Name): 
                                identifier: "google"
                                qualifier(Type=Name): 
                                    identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "LiveVariableLattice"
                qualifier(Type=Name): 
                    identifier: "LiveVariablesAnalysis"
                    qualifier(Type=Name): 
                        identifier: "jscomp"
                        qualifier(Type=Name): 
                            identifier: "javascript"
                            qualifier(Type=Name): 
                                identifier: "google"
                                qualifier(Type=Name): 
                                    identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "AbstractPostOrderCallback"
                qualifier(Type=Name): 
                    identifier: "NodeTraversal"
                    qualifier(Type=Name): 
                        identifier: "jscomp"
                        qualifier(Type=Name): 
                            identifier: "javascript"
                            qualifier(Type=Name): 
                                identifier: "google"
                                qualifier(Type=Name): 
                                    identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "ScopedCallback"
                qualifier(Type=Name): 
                    identifier: "NodeTraversal"
                    qualifier(Type=Name): 
                        identifier: "jscomp"
                        qualifier(Type=Name): 
                            identifier: "javascript"
                            qualifier(Type=Name): 
                                identifier: "google"
                                qualifier(Type=Name): 
                                    identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "Var"
                qualifier(Type=Name): 
                    identifier: "Scope"
                    qualifier(Type=Name): 
                        identifier: "jscomp"
                        qualifier(Type=Name): 
                            identifier: "javascript"
                            qualifier(Type=Name): 
                                identifier: "google"
                                qualifier(Type=Name): 
                                    identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "DiGraphNode"
                qualifier(Type=Name): 
                    identifier: "DiGraph"
                    qualifier(Type=Name): 
                        identifier: "graph"
                        qualifier(Type=Name): 
                            identifier: "jscomp"
                            qualifier(Type=Name): 
                                identifier: "javascript"
                                qualifier(Type=Name): 
                                    identifier: "google"
                                    qualifier(Type=Name): 
                                        identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "GraphColoring"
                qualifier(Type=Name): 
                    identifier: "graph"
                    qualifier(Type=Name): 
                        identifier: "jscomp"
                        qualifier(Type=Name): 
                            identifier: "javascript"
                            qualifier(Type=Name): 
                                identifier: "google"
                                qualifier(Type=Name): 
                                    identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "GreedyGraphColoring"
                qualifier(Type=Name): 
                    identifier: "GraphColoring"
                    qualifier(Type=Name): 
                        identifier: "graph"
                        qualifier(Type=Name): 
                            identifier: "jscomp"
                            qualifier(Type=Name): 
                                identifier: "javascript"
                                qualifier(Type=Name): 
                                    identifier: "google"
                                    qualifier(Type=Name): 
                                        identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "GraphNode"
                qualifier(Type=Name): 
                    identifier: "graph"
                    qualifier(Type=Name): 
                        identifier: "jscomp"
                        qualifier(Type=Name): 
                            identifier: "javascript"
                            qualifier(Type=Name): 
                                identifier: "google"
                                qualifier(Type=Name): 
                                    identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "LinkedUndirectedGraph"
                qualifier(Type=Name): 
                    identifier: "graph"
                    qualifier(Type=Name): 
                        identifier: "jscomp"
                        qualifier(Type=Name): 
                            identifier: "javascript"
                            qualifier(Type=Name): 
                                identifier: "google"
                                qualifier(Type=Name): 
                                    identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "UndiGraph"
                qualifier(Type=Name): 
                    identifier: "graph"
                    qualifier(Type=Name): 
                        identifier: "jscomp"
                        qualifier(Type=Name): 
                            identifier: "javascript"
                            qualifier(Type=Name): 
                                identifier: "google"
                                qualifier(Type=Name): 
                                    identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "IR"
                qualifier(Type=Name): 
                    identifier: "rhino"
                    qualifier(Type=Name): 
                        identifier: "javascript"
                        qualifier(Type=Name): 
                            identifier: "google"
                            qualifier(Type=Name): 
                                identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "Node"
                qualifier(Type=Name): 
                    identifier: "rhino"
                    qualifier(Type=Name): 
                        identifier: "javascript"
                        qualifier(Type=Name): 
                            identifier: "google"
                            qualifier(Type=Name): 
                                identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "Comparator"
                qualifier(Type=Name): 
                    identifier: "util"
                    qualifier(Type=Name): 
                        identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "Deque"
                qualifier(Type=Name): 
                    identifier: "util"
                    qualifier(Type=Name): 
                        identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "Iterator"
                qualifier(Type=Name): 
                    identifier: "util"
                    qualifier(Type=Name): 
                        identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "Set"
                qualifier(Type=Name): 
                    identifier: "util"
                    qualifier(Type=Name): 
                        identifier: "java"
    types: 
        - type(Type=ClassOrInterfaceDeclaration): 
            isInterface: "false"
            name(Type=SimpleName): 
                identifier: "CoalesceVariableNames"
            comment(Type=JavadocComment): 
                content: "\n * Reuse variable names if possible.\n *\n * <p>For example, from <code>var x = 1; print(x); var y = 2; print(y); </code>\n * to <code>var x = 1; print(x); x = 2; print(x)</code>. The benefits are\n * slightly shorter code because of the removed <code>var<code> declaration,\n * less unique variables in hope for better renaming, and finally better gzip\n * compression.\n *\n * <p>The pass operates similar to a typical register allocator found in an\n * optimizing compiler by first computing live ranges with\n * {@link LiveVariablesAnalysis} and a variable interference graph. Then it uses\n * graph coloring in {@link GraphColoring} to determine which two variables can\n * be merge together safely.\n *\n "
                contentNode(Type=JavadocContent): 
                    content: ""
                    description(Type=JavadocDescription): 
            extendedTypes: 
                - extendedType(Type=ClassOrInterfaceType): 
                    name(Type=SimpleName): 
                        identifier: "AbstractPostOrderCallback"
            implementedTypes: 
                - implementedType(Type=ClassOrInterfaceType): 
                    name(Type=SimpleName): 
                        identifier: "CompilerPass"
                - implementedType(Type=ClassOrInterfaceType): 
                    name(Type=SimpleName): 
                        identifier: "ScopedCallback"
            members: 
                - member(Type=FieldDeclaration): 
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                        - modifier(Type=Modifier): 
                            keyword: "FINAL"
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            name(Type=SimpleName): 
                                identifier: "compiler"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "AbstractCompiler"
                - member(Type=FieldDeclaration): 
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                        - modifier(Type=Modifier): 
                            keyword: "FINAL"
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            name(Type=SimpleName): 
                                identifier: "colorings"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Deque"
                                typeArguments: 
                                    - typeArgument(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "GraphColoring"
                                        typeArguments: 
                                            - typeArgument(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "Var"
                                            - typeArgument(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "Void"
                - member(Type=FieldDeclaration): 
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                        - modifier(Type=Modifier): 
                            keyword: "FINAL"
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            name(Type=SimpleName): 
                                identifier: "usePseudoNames"
                            type(Type=PrimitiveType): 
                                type: "BOOLEAN"
                - member(Type=FieldDeclaration): 
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                        - modifier(Type=Modifier): 
                            keyword: "STATIC"
                        - modifier(Type=Modifier): 
                            keyword: "FINAL"
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            initializer(Type=ObjectCreationExpr): 
                                type(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "Comparator"
                                    typeArguments: 
                                        - typeArgument(Type=ClassOrInterfaceType): 
                                            name(Type=SimpleName): 
                                                identifier: "Var"
                                anonymousClassBody: 
                                    - anonymousClassBody(Type=MethodDeclaration): 
                                        body(Type=BlockStmt): 
                                            statements: 
                                                - statement(Type=ReturnStmt): 
                                                    expression(Type=BinaryExpr): 
                                                        operator: "MINUS"
                                                        left(Type=FieldAccessExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "index"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "v1"
                                                        right(Type=FieldAccessExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "index"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "v2"
                                        type(Type=PrimitiveType): 
                                            type: "INT"
                                        name(Type=SimpleName): 
                                            identifier: "compare"
                                        modifiers: 
                                            - modifier(Type=Modifier): 
                                                keyword: "PUBLIC"
                                        parameters: 
                                            - parameter(Type=Parameter): 
                                                isVarArgs: "false"
                                                name(Type=SimpleName): 
                                                    identifier: "v1"
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "Var"
                                            - parameter(Type=Parameter): 
                                                isVarArgs: "false"
                                                name(Type=SimpleName): 
                                                    identifier: "v2"
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "Var"
                                        annotations: 
                                            - annotation(Type=MarkerAnnotationExpr): 
                                                name(Type=Name): 
                                                    identifier: "Override"
                            name(Type=SimpleName): 
                                identifier: "coloringTieBreaker"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Comparator"
                                typeArguments: 
                                    - typeArgument(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "Var"
                - member(Type=ConstructorDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "checkState"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "Preconditions"
                                    arguments: 
                                        - argument(Type=UnaryExpr): 
                                            operator: "LOGICAL_COMPLEMENT"
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "isNormalized"
                                                scope(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "getLifeCycleStage"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "compiler"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "compiler"
                                        scope(Type=ThisExpr): 
                                    value(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "compiler"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "colorings"
                                    value(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "newLinkedList"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "Lists"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "usePseudoNames"
                                        scope(Type=ThisExpr): 
                                    value(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "usePseudoNames"
                    name(Type=SimpleName): 
                        identifier: "CoalesceVariableNames"
                    comment(Type=JavadocComment): 
                        content: "\n   * @param usePseudoNames For debug purposes, when merging variable foo and bar\n   * to foo, rename both variable to foo_bar.\n   "
                        contentNode(Type=JavadocContent): 
                            content: ""
                            description(Type=JavadocDescription): 
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "compiler"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "AbstractCompiler"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "usePseudoNames"
                            type(Type=PrimitiveType): 
                                type: "BOOLEAN"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "traverse"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "NodeTraversal"
                                    arguments: 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "compiler"
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "root"
                                        - argument(Type=ThisExpr): 
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "process"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "externs"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Node"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "root"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Node"
                    annotations: 
                        - annotation(Type=MarkerAnnotationExpr): 
                            name(Type=Name): 
                                identifier: "Override"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=IfStmt): 
                                condition(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "isGlobal"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "scope"
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ReturnStmt): 
                                            expression(Type=BooleanLiteralExpr): 
                                                value: "false"
                                comment(Type=LineComment): 
                                    content: " pass in the global scope."
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "LESS"
                                    left(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "MAX_VARIABLES_TO_ANALYZE"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "LiveVariablesAnalysis"
                                    right(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "getVarCount"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "scope"
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ReturnStmt): 
                                            expression(Type=BooleanLiteralExpr): 
                                                value: "false"
                            - statement(Type=ReturnStmt): 
                                expression(Type=BooleanLiteralExpr): 
                                    value: "true"
                    type(Type=PrimitiveType): 
                        type: "BOOLEAN"
                    name(Type=SimpleName): 
                        identifier: "shouldOptimizeScope"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                        - modifier(Type=Modifier): 
                            keyword: "STATIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "scope"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Scope"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getScope"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "t"
                                            name(Type=SimpleName): 
                                                identifier: "scope"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "Scope"
                            - statement(Type=IfStmt): 
                                condition(Type=UnaryExpr): 
                                    operator: "LOGICAL_COMPLEMENT"
                                    expression(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "shouldOptimizeScope"
                                        arguments: 
                                            - argument(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "scope"
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ReturnStmt): 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getControlFlowGraph"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "t"
                                            name(Type=SimpleName): 
                                                identifier: "cfg"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "ControlFlowGraph"
                                                typeArguments: 
                                                    - typeArgument(Type=ClassOrInterfaceType): 
                                                        name(Type=SimpleName): 
                                                            identifier: "Node"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "LiveVariablesAnalysis"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "cfg"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "scope"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "compiler"
                                            name(Type=SimpleName): 
                                                identifier: "liveness"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "LiveVariablesAnalysis"
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "EQUALS"
                                    left(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "getChildCount"
                                        scope(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "getNext"
                                            scope(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getFirstChild"
                                                scope(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "getRootNode"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "scope"
                                    right(Type=IntegerLiteralExpr): 
                                        value: "2"
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "markAllParametersEscaped"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "liveness"
                                comment(Type=LineComment): 
                                    content: " http://code.google.com/p/closure-compiler/issues/detail?id=58"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "analyze"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "liveness"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "computeVariableNamesInterferenceGraph"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "t"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "cfg"
                                                    - argument(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "getEscapedLocals"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "liveness"
                                            name(Type=SimpleName): 
                                                identifier: "interferenceGraph"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "UndiGraph"
                                                typeArguments: 
                                                    - typeArgument(Type=ClassOrInterfaceType): 
                                                        name(Type=SimpleName): 
                                                            identifier: "Var"
                                                    - typeArgument(Type=ClassOrInterfaceType): 
                                                        name(Type=SimpleName): 
                                                            identifier: "Void"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "GreedyGraphColoring"
                                                    typeArguments: 
                                                        - typeArgument(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "Var"
                                                        - typeArgument(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "Void"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "interferenceGraph"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "coloringTieBreaker"
                                            name(Type=SimpleName): 
                                                identifier: "coloring"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "GraphColoring"
                                                typeArguments: 
                                                    - typeArgument(Type=ClassOrInterfaceType): 
                                                        name(Type=SimpleName): 
                                                            identifier: "Var"
                                                    - typeArgument(Type=ClassOrInterfaceType): 
                                                        name(Type=SimpleName): 
                                                            identifier: "Void"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "color"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "coloring"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "push"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "colorings"
                                    arguments: 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "coloring"
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "enterScope"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "t"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "NodeTraversal"
                    annotations: 
                        - annotation(Type=MarkerAnnotationExpr): 
                            name(Type=Name): 
                                identifier: "Override"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=IfStmt): 
                                condition(Type=UnaryExpr): 
                                    operator: "LOGICAL_COMPLEMENT"
                                    expression(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "shouldOptimizeScope"
                                        arguments: 
                                            - argument(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getScope"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "t"
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ReturnStmt): 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "pop"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "colorings"
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "exitScope"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "t"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "NodeTraversal"
                    annotations: 
                        - annotation(Type=MarkerAnnotationExpr): 
                            name(Type=Name): 
                                identifier: "Override"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "OR"
                                    left(Type=BinaryExpr): 
                                        operator: "OR"
                                        left(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "isEmpty"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "colorings"
                                        right(Type=UnaryExpr): 
                                            operator: "LOGICAL_COMPLEMENT"
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "isName"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "n"
                                    right(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "isFunction"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "parent"
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ReturnStmt): 
                                            comment(Type=LineComment): 
                                                content: " Don't rename named functions."
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getVar"
                                                scope(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "getScope"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "t"
                                                arguments: 
                                                    - argument(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "getString"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "n"
                                            name(Type=SimpleName): 
                                                identifier: "var"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "Var"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getNode"
                                                scope(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "getGraph"
                                                    scope(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "peek"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "colorings"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "var"
                                            name(Type=SimpleName): 
                                                identifier: "vNode"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "GraphNode"
                                                typeArguments: 
                                                    - typeArgument(Type=ClassOrInterfaceType): 
                                                        name(Type=SimpleName): 
                                                            identifier: "Var"
                                                    - typeArgument(Type=WildcardType): 
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "EQUALS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "vNode"
                                    right(Type=NullLiteralExpr): 
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ReturnStmt): 
                                            comment(Type=LineComment): 
                                                content: " This is not a local."
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getPartitionSuperNode"
                                                scope(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "peek"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "colorings"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "var"
                                            name(Type=SimpleName): 
                                                identifier: "coalescedVar"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "Var"
                            - statement(Type=IfStmt): 
                                condition(Type=UnaryExpr): 
                                    operator: "LOGICAL_COMPLEMENT"
                                    expression(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "usePseudoNames"
                                elseStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=NullLiteralExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "pseudoName"
                                                        type(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "String"
                                            comment(Type=LineComment): 
                                                content: " make this fast."
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "newTreeSet"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "Sets"
                                                        name(Type=SimpleName): 
                                                            identifier: "allMergedNames"
                                                        type(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "Set"
                                                            typeArguments: 
                                                                - typeArgument(Type=ClassOrInterfaceType): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "String"
                                        - statement(Type=ForStmt): 
                                            body(Type=BlockStmt): 
                                                statements: 
                                                    - statement(Type=ExpressionStmt): 
                                                        expression(Type=VariableDeclarationExpr): 
                                                            variables: 
                                                                - variable(Type=VariableDeclarator): 
                                                                    initializer(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "next"
                                                                        scope(Type=NameExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "i"
                                                                    name(Type=SimpleName): 
                                                                        identifier: "iVar"
                                                                    type(Type=ClassOrInterfaceType): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "Var"
                                                    - statement(Type=IfStmt): 
                                                        condition(Type=BinaryExpr): 
                                                            operator: "AND"
                                                            left(Type=BinaryExpr): 
                                                                operator: "NOT_EQUALS"
                                                                left(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "getNode"
                                                                    scope(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "getGraph"
                                                                        scope(Type=MethodCallExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "peek"
                                                                            scope(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "colorings"
                                                                    arguments: 
                                                                        - argument(Type=NameExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "iVar"
                                                                right(Type=NullLiteralExpr): 
                                                            right(Type=MethodCallExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "equals"
                                                                scope(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "coalescedVar"
                                                                arguments: 
                                                                    - argument(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "getPartitionSuperNode"
                                                                        scope(Type=MethodCallExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "peek"
                                                                            scope(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "colorings"
                                                                        arguments: 
                                                                            - argument(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "iVar"
                                                        thenStmt(Type=BlockStmt): 
                                                            statements: 
                                                                - statement(Type=ExpressionStmt): 
                                                                    expression(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "add"
                                                                        scope(Type=NameExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "allMergedNames"
                                                                        arguments: 
                                                                            - argument(Type=FieldAccessExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "name"
                                                                                scope(Type=NameExpr): 
                                                                                    name(Type=SimpleName): 
                                                                                        identifier: "iVar"
                                                        comment(Type=LineComment): 
                                                            content: " and it is merged with the current coalescedVar."
                                            compare(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "hasNext"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "i"
                                            initialization: 
                                                - initialization(Type=VariableDeclarationExpr): 
                                                    variables: 
                                                        - variable(Type=VariableDeclarator): 
                                                            initializer(Type=MethodCallExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "getVars"
                                                                scope(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "getScope"
                                                                    scope(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "t"
                                                            name(Type=SimpleName): 
                                                                identifier: "i"
                                                            type(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "Iterator"
                                                                typeArguments: 
                                                                    - typeArgument(Type=ClassOrInterfaceType): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "Var"
                                        - statement(Type=IfStmt): 
                                            condition(Type=BinaryExpr): 
                                                operator: "EQUALS"
                                                left(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "size"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "allMergedNames"
                                                right(Type=IntegerLiteralExpr): 
                                                    value: "1"
                                            thenStmt(Type=BlockStmt): 
                                                statements: 
                                                    - statement(Type=ReturnStmt): 
                                            comment(Type=LineComment): 
                                                content: " Keep its original name."
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=AssignExpr): 
                                                operator: "ASSIGN"
                                                target(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "pseudoName"
                                                value(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "join"
                                                    scope(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "on"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "Joiner"
                                                        arguments: 
                                                            - argument(Type=StringLiteralExpr): 
                                                                value: "_"
                                                    arguments: 
                                                        - argument(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "allMergedNames"
                                        - statement(Type=WhileStmt): 
                                            body(Type=BlockStmt): 
                                                statements: 
                                                    - statement(Type=ExpressionStmt): 
                                                        expression(Type=AssignExpr): 
                                                            operator: "PLUS"
                                                            target(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "pseudoName"
                                                            value(Type=StringLiteralExpr): 
                                                                value: "$"
                                            condition(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "isDeclared"
                                                scope(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "getScope"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "t"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "pseudoName"
                                                    - argument(Type=BooleanLiteralExpr): 
                                                        value: "true"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "setString"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "n"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "pseudoName"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "reportCodeChange"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "compiler"
                                        - statement(Type=IfStmt): 
                                            condition(Type=BinaryExpr): 
                                                operator: "AND"
                                                left(Type=UnaryExpr): 
                                                    operator: "LOGICAL_COMPLEMENT"
                                                    expression(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "equals"
                                                        scope(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "getValue"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "vNode"
                                                        arguments: 
                                                            - argument(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "coalescedVar"
                                                right(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "isVar"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "parent"
                                            thenStmt(Type=BlockStmt): 
                                                statements: 
                                                    - statement(Type=ExpressionStmt): 
                                                        expression(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "removeVarDeclaration"
                                                            arguments: 
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "n"
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=IfStmt): 
                                            condition(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "equals"
                                                scope(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "getValue"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "vNode"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "coalescedVar"
                                            thenStmt(Type=BlockStmt): 
                                                statements: 
                                                    - statement(Type=ReturnStmt): 
                                                        comment(Type=LineComment): 
                                                            content: " The coalesced name is itself, nothing to do."
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "setString"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "n"
                                                arguments: 
                                                    - argument(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "name"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "coalescedVar"
                                            comment(Type=LineComment): 
                                                content: " Rename."
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "reportCodeChange"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "compiler"
                                        - statement(Type=IfStmt): 
                                            condition(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "isVar"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "parent"
                                            thenStmt(Type=BlockStmt): 
                                                statements: 
                                                    - statement(Type=ExpressionStmt): 
                                                        expression(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "removeVarDeclaration"
                                                            arguments: 
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "n"
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "visit"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "t"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "NodeTraversal"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "n"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Node"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "parent"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Node"
                    annotations: 
                        - annotation(Type=MarkerAnnotationExpr): 
                            name(Type=Name): 
                                identifier: "Override"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "create"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "LinkedUndirectedGraph"
                                            name(Type=SimpleName): 
                                                identifier: "interferenceGraph"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "UndiGraph"
                                                typeArguments: 
                                                    - typeArgument(Type=ClassOrInterfaceType): 
                                                        name(Type=SimpleName): 
                                                            identifier: "Var"
                                                    - typeArgument(Type=ClassOrInterfaceType): 
                                                        name(Type=SimpleName): 
                                                            identifier: "Void"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getScope"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "t"
                                            name(Type=SimpleName): 
                                                identifier: "scope"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "Scope"
                            - statement(Type=ForStmt): 
                                body(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "next"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "i"
                                                        name(Type=SimpleName): 
                                                            identifier: "v"
                                                        type(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "Var"
                                        - statement(Type=IfStmt): 
                                            condition(Type=UnaryExpr): 
                                                operator: "LOGICAL_COMPLEMENT"
                                                expression(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "contains"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "escaped"
                                                    arguments: 
                                                        - argument(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "v"
                                            thenStmt(Type=BlockStmt): 
                                                statements: 
                                                    - statement(Type=IfStmt): 
                                                        condition(Type=UnaryExpr): 
                                                            operator: "LOGICAL_COMPLEMENT"
                                                            expression(Type=MethodCallExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "isFunction"
                                                                scope(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "getParentNode"
                                                                    scope(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "v"
                                                        thenStmt(Type=BlockStmt): 
                                                            statements: 
                                                                - statement(Type=ExpressionStmt): 
                                                                    expression(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "createNode"
                                                                        scope(Type=NameExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "interferenceGraph"
                                                                        arguments: 
                                                                            - argument(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "v"
                                                        comment(Type=LineComment): 
                                                            content: " around with it."
                                compare(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "hasNext"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "i"
                                comment(Type=LineComment): 
                                    content: " First create a node for each non-escaped variable."
                                initialization: 
                                    - initialization(Type=VariableDeclarationExpr): 
                                        variables: 
                                            - variable(Type=VariableDeclarator): 
                                                initializer(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "getVars"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "scope"
                                                name(Type=SimpleName): 
                                                    identifier: "i"
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "Iterator"
                                                    typeArguments: 
                                                        - typeArgument(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "Var"
                            - statement(Type=ForStmt): 
                                body(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "next"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "i1"
                                                        name(Type=SimpleName): 
                                                            identifier: "v1"
                                                        type(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "Var"
                                        - statement(Type=LabeledStmt): 
                                            label(Type=SimpleName): 
                                                identifier: "NEXT_VAR_PAIR"
                                            statement(Type=ForStmt): 
                                                body(Type=BlockStmt): 
                                                    statements: 
                                                        - statement(Type=ExpressionStmt): 
                                                            expression(Type=VariableDeclarationExpr): 
                                                                variables: 
                                                                    - variable(Type=VariableDeclarator): 
                                                                        initializer(Type=MethodCallExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "next"
                                                                            scope(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "i2"
                                                                        name(Type=SimpleName): 
                                                                            identifier: "v2"
                                                                        type(Type=ClassOrInterfaceType): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "Var"
                                                        - statement(Type=IfStmt): 
                                                            condition(Type=BinaryExpr): 
                                                                operator: "GREATER_EQUALS"
                                                                left(Type=FieldAccessExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "index"
                                                                    scope(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "v1"
                                                                right(Type=FieldAccessExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "index"
                                                                    scope(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "v2"
                                                            thenStmt(Type=BlockStmt): 
                                                                statements: 
                                                                    - statement(Type=ContinueStmt): 
                                                            comment(Type=LineComment): 
                                                                content: " Skip duplicate pairs."
                                                        - statement(Type=IfStmt): 
                                                            condition(Type=BinaryExpr): 
                                                                operator: "OR"
                                                                left(Type=UnaryExpr): 
                                                                    operator: "LOGICAL_COMPLEMENT"
                                                                    expression(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "hasNode"
                                                                        scope(Type=NameExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "interferenceGraph"
                                                                        arguments: 
                                                                            - argument(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "v1"
                                                                right(Type=UnaryExpr): 
                                                                    operator: "LOGICAL_COMPLEMENT"
                                                                    expression(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "hasNode"
                                                                        scope(Type=NameExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "interferenceGraph"
                                                                        arguments: 
                                                                            - argument(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "v2"
                                                            thenStmt(Type=BlockStmt): 
                                                                statements: 
                                                                    - statement(Type=ContinueStmt): 
                                                                        label(Type=SimpleName): 
                                                                            identifier: "NEXT_VAR_PAIR"
                                                                        comment(Type=LineComment): 
                                                                            content: " locals. Also avoid merging a variable with itself."
                                                        - statement(Type=IfStmt): 
                                                            condition(Type=BinaryExpr): 
                                                                operator: "AND"
                                                                left(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "isParamList"
                                                                    scope(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "getParentNode"
                                                                        scope(Type=NameExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "v1"
                                                                right(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "isParamList"
                                                                    scope(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "getParentNode"
                                                                        scope(Type=NameExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "v2"
                                                            thenStmt(Type=BlockStmt): 
                                                                statements: 
                                                                    - statement(Type=ExpressionStmt): 
                                                                        expression(Type=MethodCallExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "connectIfNotFound"
                                                                            scope(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "interferenceGraph"
                                                                            arguments: 
                                                                                - argument(Type=NameExpr): 
                                                                                    name(Type=SimpleName): 
                                                                                        identifier: "v1"
                                                                                - argument(Type=NullLiteralExpr): 
                                                                                - argument(Type=NameExpr): 
                                                                                    name(Type=SimpleName): 
                                                                                        identifier: "v2"
                                                                    - statement(Type=ContinueStmt): 
                                                                        label(Type=SimpleName): 
                                                                            identifier: "NEXT_VAR_PAIR"
                                                        - statement(Type=LabeledStmt): 
                                                            label(Type=SimpleName): 
                                                                identifier: "NEXT_CROSS_CFG_NODE"
                                                            statement(Type=ForEachStmt): 
                                                                body(Type=BlockStmt): 
                                                                    statements: 
                                                                        - statement(Type=IfStmt): 
                                                                            condition(Type=MethodCallExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "isImplicitReturn"
                                                                                scope(Type=NameExpr): 
                                                                                    name(Type=SimpleName): 
                                                                                        identifier: "cfg"
                                                                                arguments: 
                                                                                    - argument(Type=NameExpr): 
                                                                                        name(Type=SimpleName): 
                                                                                            identifier: "cfgNode"
                                                                            thenStmt(Type=BlockStmt): 
                                                                                statements: 
                                                                                    - statement(Type=ContinueStmt): 
                                                                                        label(Type=SimpleName): 
                                                                                            identifier: "NEXT_CROSS_CFG_NODE"
                                                                        - statement(Type=ExpressionStmt): 
                                                                            expression(Type=VariableDeclarationExpr): 
                                                                                variables: 
                                                                                    - variable(Type=VariableDeclarator): 
                                                                                        initializer(Type=MethodCallExpr): 
                                                                                            name(Type=SimpleName): 
                                                                                                identifier: "getAnnotation"
                                                                                            scope(Type=NameExpr): 
                                                                                                name(Type=SimpleName): 
                                                                                                    identifier: "cfgNode"
                                                                                        name(Type=SimpleName): 
                                                                                            identifier: "state"
                                                                                        type(Type=ClassOrInterfaceType): 
                                                                                            name(Type=SimpleName): 
                                                                                                identifier: "FlowState"
                                                                                            typeArguments: 
                                                                                                - typeArgument(Type=ClassOrInterfaceType): 
                                                                                                    name(Type=SimpleName): 
                                                                                                        identifier: "LiveVariableLattice"
                                                                        - statement(Type=IfStmt): 
                                                                            condition(Type=BinaryExpr): 
                                                                                operator: "OR"
                                                                                left(Type=EnclosedExpr): 
                                                                                    inner(Type=BinaryExpr): 
                                                                                        operator: "AND"
                                                                                        left(Type=MethodCallExpr): 
                                                                                            name(Type=SimpleName): 
                                                                                                identifier: "isLive"
                                                                                            scope(Type=MethodCallExpr): 
                                                                                                name(Type=SimpleName): 
                                                                                                    identifier: "getIn"
                                                                                                scope(Type=NameExpr): 
                                                                                                    name(Type=SimpleName): 
                                                                                                        identifier: "state"
                                                                                            arguments: 
                                                                                                - argument(Type=NameExpr): 
                                                                                                    name(Type=SimpleName): 
                                                                                                        identifier: "v1"
                                                                                        right(Type=MethodCallExpr): 
                                                                                            name(Type=SimpleName): 
                                                                                                identifier: "isLive"
                                                                                            scope(Type=MethodCallExpr): 
                                                                                                name(Type=SimpleName): 
                                                                                                    identifier: "getIn"
                                                                                                scope(Type=NameExpr): 
                                                                                                    name(Type=SimpleName): 
                                                                                                        identifier: "state"
                                                                                            arguments: 
                                                                                                - argument(Type=NameExpr): 
                                                                                                    name(Type=SimpleName): 
                                                                                                        identifier: "v2"
                                                                                right(Type=EnclosedExpr): 
                                                                                    inner(Type=BinaryExpr): 
                                                                                        operator: "AND"
                                                                                        left(Type=MethodCallExpr): 
                                                                                            name(Type=SimpleName): 
                                                                                                identifier: "isLive"
                                                                                            scope(Type=MethodCallExpr): 
                                                                                                name(Type=SimpleName): 
                                                                                                    identifier: "getOut"
                                                                                                scope(Type=NameExpr): 
                                                                                                    name(Type=SimpleName): 
                                                                                                        identifier: "state"
                                                                                            arguments: 
                                                                                                - argument(Type=NameExpr): 
                                                                                                    name(Type=SimpleName): 
                                                                                                        identifier: "v1"
                                                                                        right(Type=MethodCallExpr): 
                                                                                            name(Type=SimpleName): 
                                                                                                identifier: "isLive"
                                                                                            scope(Type=MethodCallExpr): 
                                                                                                name(Type=SimpleName): 
                                                                                                    identifier: "getOut"
                                                                                                scope(Type=NameExpr): 
                                                                                                    name(Type=SimpleName): 
                                                                                                        identifier: "state"
                                                                                            arguments: 
                                                                                                - argument(Type=NameExpr): 
                                                                                                    name(Type=SimpleName): 
                                                                                                        identifier: "v2"
                                                                            thenStmt(Type=BlockStmt): 
                                                                                statements: 
                                                                                    - statement(Type=ExpressionStmt): 
                                                                                        expression(Type=MethodCallExpr): 
                                                                                            name(Type=SimpleName): 
                                                                                                identifier: "connectIfNotFound"
                                                                                            scope(Type=NameExpr): 
                                                                                                name(Type=SimpleName): 
                                                                                                    identifier: "interferenceGraph"
                                                                                            arguments: 
                                                                                                - argument(Type=NameExpr): 
                                                                                                    name(Type=SimpleName): 
                                                                                                        identifier: "v1"
                                                                                                - argument(Type=NullLiteralExpr): 
                                                                                                - argument(Type=NameExpr): 
                                                                                                    name(Type=SimpleName): 
                                                                                                        identifier: "v2"
                                                                                    - statement(Type=ContinueStmt): 
                                                                                        label(Type=SimpleName): 
                                                                                            identifier: "NEXT_VAR_PAIR"
                                                                            comment(Type=LineComment): 
                                                                                content: " Check the live states and add edge when possible."
                                                                iterable(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "getDirectedGraphNodes"
                                                                    scope(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "cfg"
                                                                variable(Type=VariableDeclarationExpr): 
                                                                    variables: 
                                                                        - variable(Type=VariableDeclarator): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "cfgNode"
                                                                            type(Type=ClassOrInterfaceType): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "DiGraphNode"
                                                                                typeArguments: 
                                                                                    - typeArgument(Type=ClassOrInterfaceType): 
                                                                                        name(Type=SimpleName): 
                                                                                            identifier: "Node"
                                                                                    - typeArgument(Type=ClassOrInterfaceType): 
                                                                                        name(Type=SimpleName): 
                                                                                            identifier: "Branch"
                                                            comment(Type=LineComment): 
                                                                content: " time, add an edge between them and continue to the next pair."
                                                        - statement(Type=LabeledStmt): 
                                                            label(Type=SimpleName): 
                                                                identifier: "NEXT_INTRA_CFG_NODE"
                                                            statement(Type=ForEachStmt): 
                                                                body(Type=BlockStmt): 
                                                                    statements: 
                                                                        - statement(Type=IfStmt): 
                                                                            condition(Type=MethodCallExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "isImplicitReturn"
                                                                                scope(Type=NameExpr): 
                                                                                    name(Type=SimpleName): 
                                                                                        identifier: "cfg"
                                                                                arguments: 
                                                                                    - argument(Type=NameExpr): 
                                                                                        name(Type=SimpleName): 
                                                                                            identifier: "cfgNode"
                                                                            thenStmt(Type=BlockStmt): 
                                                                                statements: 
                                                                                    - statement(Type=ContinueStmt): 
                                                                                        label(Type=SimpleName): 
                                                                                            identifier: "NEXT_INTRA_CFG_NODE"
                                                                        - statement(Type=ExpressionStmt): 
                                                                            expression(Type=VariableDeclarationExpr): 
                                                                                variables: 
                                                                                    - variable(Type=VariableDeclarator): 
                                                                                        initializer(Type=MethodCallExpr): 
                                                                                            name(Type=SimpleName): 
                                                                                                identifier: "getAnnotation"
                                                                                            scope(Type=NameExpr): 
                                                                                                name(Type=SimpleName): 
                                                                                                    identifier: "cfgNode"
                                                                                        name(Type=SimpleName): 
                                                                                            identifier: "state"
                                                                                        type(Type=ClassOrInterfaceType): 
                                                                                            name(Type=SimpleName): 
                                                                                                identifier: "FlowState"
                                                                                            typeArguments: 
                                                                                                - typeArgument(Type=ClassOrInterfaceType): 
                                                                                                    name(Type=SimpleName): 
                                                                                                        identifier: "LiveVariableLattice"
                                                                        - statement(Type=ExpressionStmt): 
                                                                            expression(Type=VariableDeclarationExpr): 
                                                                                variables: 
                                                                                    - variable(Type=VariableDeclarator): 
                                                                                        initializer(Type=MethodCallExpr): 
                                                                                            name(Type=SimpleName): 
                                                                                                identifier: "isLive"
                                                                                            scope(Type=MethodCallExpr): 
                                                                                                name(Type=SimpleName): 
                                                                                                    identifier: "getOut"
                                                                                                scope(Type=NameExpr): 
                                                                                                    name(Type=SimpleName): 
                                                                                                        identifier: "state"
                                                                                            arguments: 
                                                                                                - argument(Type=NameExpr): 
                                                                                                    name(Type=SimpleName): 
                                                                                                        identifier: "v1"
                                                                                        name(Type=SimpleName): 
                                                                                            identifier: "v1OutLive"
                                                                                        type(Type=PrimitiveType): 
                                                                                            type: "BOOLEAN"
                                                                        - statement(Type=ExpressionStmt): 
                                                                            expression(Type=VariableDeclarationExpr): 
                                                                                variables: 
                                                                                    - variable(Type=VariableDeclarator): 
                                                                                        initializer(Type=MethodCallExpr): 
                                                                                            name(Type=SimpleName): 
                                                                                                identifier: "isLive"
                                                                                            scope(Type=MethodCallExpr): 
                                                                                                name(Type=SimpleName): 
                                                                                                    identifier: "getOut"
                                                                                                scope(Type=NameExpr): 
                                                                                                    name(Type=SimpleName): 
                                                                                                        identifier: "state"
                                                                                            arguments: 
                                                                                                - argument(Type=NameExpr): 
                                                                                                    name(Type=SimpleName): 
                                                                                                        identifier: "v2"
                                                                                        name(Type=SimpleName): 
                                                                                            identifier: "v2OutLive"
                                                                                        type(Type=PrimitiveType): 
                                                                                            type: "BOOLEAN"
                                                                        - statement(Type=ExpressionStmt): 
                                                                            expression(Type=VariableDeclarationExpr): 
                                                                                variables: 
                                                                                    - variable(Type=VariableDeclarator): 
                                                                                        initializer(Type=ObjectCreationExpr): 
                                                                                            type(Type=ClassOrInterfaceType): 
                                                                                                name(Type=SimpleName): 
                                                                                                    identifier: "CombinedLiveRangeChecker"
                                                                                            arguments: 
                                                                                                - argument(Type=ObjectCreationExpr): 
                                                                                                    type(Type=ClassOrInterfaceType): 
                                                                                                        name(Type=SimpleName): 
                                                                                                            identifier: "LiveRangeChecker"
                                                                                                    arguments: 
                                                                                                        - argument(Type=NameExpr): 
                                                                                                            name(Type=SimpleName): 
                                                                                                                identifier: "v1"
                                                                                                        - argument(Type=ConditionalExpr): 
                                                                                                            condition(Type=NameExpr): 
                                                                                                                name(Type=SimpleName): 
                                                                                                                    identifier: "v2OutLive"
                                                                                                            elseExpr(Type=NameExpr): 
                                                                                                                name(Type=SimpleName): 
                                                                                                                    identifier: "v2"
                                                                                                            thenExpr(Type=NullLiteralExpr): 
                                                                                                - argument(Type=ObjectCreationExpr): 
                                                                                                    type(Type=ClassOrInterfaceType): 
                                                                                                        name(Type=SimpleName): 
                                                                                                            identifier: "LiveRangeChecker"
                                                                                                    arguments: 
                                                                                                        - argument(Type=NameExpr): 
                                                                                                            name(Type=SimpleName): 
                                                                                                                identifier: "v2"
                                                                                                        - argument(Type=ConditionalExpr): 
                                                                                                            condition(Type=NameExpr): 
                                                                                                                name(Type=SimpleName): 
                                                                                                                    identifier: "v1OutLive"
                                                                                                            elseExpr(Type=NameExpr): 
                                                                                                                name(Type=SimpleName): 
                                                                                                                    identifier: "v1"
                                                                                                            thenExpr(Type=NullLiteralExpr): 
                                                                                        name(Type=SimpleName): 
                                                                                            identifier: "checker"
                                                                                        type(Type=ClassOrInterfaceType): 
                                                                                            name(Type=SimpleName): 
                                                                                                identifier: "CombinedLiveRangeChecker"
                                                                        - statement(Type=ExpressionStmt): 
                                                                            expression(Type=MethodCallExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "traverse"
                                                                                scope(Type=NameExpr): 
                                                                                    name(Type=SimpleName): 
                                                                                        identifier: "NodeTraversal"
                                                                                arguments: 
                                                                                    - argument(Type=NameExpr): 
                                                                                        name(Type=SimpleName): 
                                                                                            identifier: "compiler"
                                                                                    - argument(Type=MethodCallExpr): 
                                                                                        name(Type=SimpleName): 
                                                                                            identifier: "getValue"
                                                                                        scope(Type=NameExpr): 
                                                                                            name(Type=SimpleName): 
                                                                                                identifier: "cfgNode"
                                                                                    - argument(Type=NameExpr): 
                                                                                        name(Type=SimpleName): 
                                                                                            identifier: "checker"
                                                                        - statement(Type=IfStmt): 
                                                                            condition(Type=MethodCallExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "connectIfCrossed"
                                                                                scope(Type=NameExpr): 
                                                                                    name(Type=SimpleName): 
                                                                                        identifier: "checker"
                                                                                arguments: 
                                                                                    - argument(Type=NameExpr): 
                                                                                        name(Type=SimpleName): 
                                                                                            identifier: "interferenceGraph"
                                                                            thenStmt(Type=BlockStmt): 
                                                                                statements: 
                                                                                    - statement(Type=ContinueStmt): 
                                                                                        label(Type=SimpleName): 
                                                                                            identifier: "NEXT_VAR_PAIR"
                                                                iterable(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "getDirectedGraphNodes"
                                                                    scope(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "cfg"
                                                                variable(Type=VariableDeclarationExpr): 
                                                                    variables: 
                                                                        - variable(Type=VariableDeclarator): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "cfgNode"
                                                                            type(Type=ClassOrInterfaceType): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "DiGraphNode"
                                                                                typeArguments: 
                                                                                    - typeArgument(Type=ClassOrInterfaceType): 
                                                                                        name(Type=SimpleName): 
                                                                                            identifier: "Node"
                                                                                    - typeArgument(Type=ClassOrInterfaceType): 
                                                                                        name(Type=SimpleName): 
                                                                                            identifier: "Branch"
                                                            comment(Type=LineComment): 
                                                                content: " if there's a collision *within* the cfg node."
                                                compare(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "hasNext"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "i2"
                                                initialization: 
                                                    - initialization(Type=VariableDeclarationExpr): 
                                                        variables: 
                                                            - variable(Type=VariableDeclarator): 
                                                                initializer(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "getVars"
                                                                    scope(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "scope"
                                                                name(Type=SimpleName): 
                                                                    identifier: "i2"
                                                                type(Type=ClassOrInterfaceType): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "Iterator"
                                                                    typeArguments: 
                                                                        - typeArgument(Type=ClassOrInterfaceType): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "Var"
                                compare(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "hasNext"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "i1"
                                comment(Type=LineComment): 
                                    content: " Go through each variable and try to connect them."
                                initialization: 
                                    - initialization(Type=VariableDeclarationExpr): 
                                        variables: 
                                            - variable(Type=VariableDeclarator): 
                                                initializer(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "getVars"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "scope"
                                                name(Type=SimpleName): 
                                                    identifier: "i1"
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "Iterator"
                                                    typeArguments: 
                                                        - typeArgument(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "Var"
                            - statement(Type=ReturnStmt): 
                                expression(Type=NameExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "interferenceGraph"
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "UndiGraph"
                        typeArguments: 
                            - typeArgument(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Var"
                            - typeArgument(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Void"
                    name(Type=SimpleName): 
                        identifier: "computeVariableNamesInterferenceGraph"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "t"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "NodeTraversal"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "cfg"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "ControlFlowGraph"
                                typeArguments: 
                                    - typeArgument(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "Node"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "escaped"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Set"
                                typeArguments: 
                                    - typeArgument(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "Var"
                - member(Type=ClassOrInterfaceDeclaration): 
                    isInterface: "false"
                    name(Type=SimpleName): 
                        identifier: "CombinedLiveRangeChecker"
                    comment(Type=JavadocComment): 
                        content: "\n   * A simple wrapper calls to call two AbstractCfgNodeTraversalCallback\n   * callback during the same traversal.  Both traversals must have the same\n   * \"shouldTraverse\" conditions.\n   "
                        contentNode(Type=JavadocContent): 
                            content: ""
                            description(Type=JavadocDescription): 
                    extendedTypes: 
                        - extendedType(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "AbstractCfgNodeTraversalCallback"
                    members: 
                        - member(Type=FieldDeclaration): 
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PRIVATE"
                                - modifier(Type=Modifier): 
                                    keyword: "FINAL"
                            variables: 
                                - variable(Type=VariableDeclarator): 
                                    name(Type=SimpleName): 
                                        identifier: "callback1"
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "LiveRangeChecker"
                        - member(Type=FieldDeclaration): 
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PRIVATE"
                                - modifier(Type=Modifier): 
                                    keyword: "FINAL"
                            variables: 
                                - variable(Type=VariableDeclarator): 
                                    name(Type=SimpleName): 
                                        identifier: "callback2"
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "LiveRangeChecker"
                        - member(Type=ConstructorDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=AssignExpr): 
                                            operator: "ASSIGN"
                                            target(Type=FieldAccessExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "callback1"
                                                scope(Type=ThisExpr): 
                                            value(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "callback1"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=AssignExpr): 
                                            operator: "ASSIGN"
                                            target(Type=FieldAccessExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "callback2"
                                                scope(Type=ThisExpr): 
                                            value(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "callback2"
                            name(Type=SimpleName): 
                                identifier: "CombinedLiveRangeChecker"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "callback1"
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "LiveRangeChecker"
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "callback2"
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "LiveRangeChecker"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=IfStmt): 
                                        condition(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "shouldVisit"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "LiveRangeChecker"
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "n"
                                        thenStmt(Type=BlockStmt): 
                                            statements: 
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "visit"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "callback1"
                                                        arguments: 
                                                            - argument(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "t"
                                                            - argument(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "n"
                                                            - argument(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "parent"
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "visit"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "callback2"
                                                        arguments: 
                                                            - argument(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "t"
                                                            - argument(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "n"
                                                            - argument(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "parent"
                            type(Type=VoidType): 
                            name(Type=SimpleName): 
                                identifier: "visit"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "t"
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "NodeTraversal"
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "n"
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "Node"
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "parent"
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "Node"
                            annotations: 
                                - annotation(Type=MarkerAnnotationExpr): 
                                    name(Type=Name): 
                                        identifier: "Override"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=IfStmt): 
                                        condition(Type=BinaryExpr): 
                                            operator: "OR"
                                            left(Type=FieldAccessExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "crossed"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "callback1"
                                            right(Type=FieldAccessExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "crossed"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "callback2"
                                        thenStmt(Type=BlockStmt): 
                                            statements: 
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=VariableDeclarationExpr): 
                                                        variables: 
                                                            - variable(Type=VariableDeclarator): 
                                                                initializer(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "getDef"
                                                                    scope(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "callback1"
                                                                name(Type=SimpleName): 
                                                                    identifier: "v1"
                                                                type(Type=ClassOrInterfaceType): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "Var"
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=VariableDeclarationExpr): 
                                                        variables: 
                                                            - variable(Type=VariableDeclarator): 
                                                                initializer(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "getDef"
                                                                    scope(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "callback2"
                                                                name(Type=SimpleName): 
                                                                    identifier: "v2"
                                                                type(Type=ClassOrInterfaceType): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "Var"
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "connectIfNotFound"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "interferenceGraph"
                                                        arguments: 
                                                            - argument(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "v1"
                                                            - argument(Type=NullLiteralExpr): 
                                                            - argument(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "v2"
                                                - statement(Type=ReturnStmt): 
                                                    expression(Type=BooleanLiteralExpr): 
                                                        value: "true"
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=BooleanLiteralExpr): 
                                            value: "false"
                            type(Type=PrimitiveType): 
                                type: "BOOLEAN"
                            name(Type=SimpleName): 
                                identifier: "connectIfCrossed"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "interferenceGraph"
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "UndiGraph"
                                        typeArguments: 
                                            - typeArgument(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "Var"
                                            - typeArgument(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "Void"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                        - modifier(Type=Modifier): 
                            keyword: "STATIC"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getParent"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "name"
                                            name(Type=SimpleName): 
                                                identifier: "var"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "Node"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getParent"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "var"
                                            name(Type=SimpleName): 
                                                identifier: "parent"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "Node"
                            - statement(Type=IfStmt): 
                                condition(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "isForIn"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "NodeUtil"
                                    arguments: 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "parent"
                                elseStmt(Type=IfStmt): 
                                    condition(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "hasOneChild"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "var"
                                    elseStmt(Type=BlockStmt): 
                                        statements: 
                                            - statement(Type=IfStmt): 
                                                condition(Type=UnaryExpr): 
                                                    operator: "LOGICAL_COMPLEMENT"
                                                    expression(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "hasChildren"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "name"
                                                thenStmt(Type=BlockStmt): 
                                                    statements: 
                                                        - statement(Type=ExpressionStmt): 
                                                            expression(Type=MethodCallExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "removeChild"
                                                                scope(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "var"
                                                                arguments: 
                                                                    - argument(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "name"
                                    thenStmt(Type=BlockStmt): 
                                        statements: 
                                            - statement(Type=IfStmt): 
                                                condition(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "hasChildren"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "name"
                                                elseStmt(Type=BlockStmt): 
                                                    statements: 
                                                        - statement(Type=ExpressionStmt): 
                                                            expression(Type=MethodCallExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "removeChild"
                                                                scope(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "NodeUtil"
                                                                arguments: 
                                                                    - argument(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "parent"
                                                                    - argument(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "var"
                                                            comment(Type=LineComment): 
                                                                content: " becomes a FOR-IN node."
                                                thenStmt(Type=BlockStmt): 
                                                    statements: 
                                                        - statement(Type=ExpressionStmt): 
                                                            expression(Type=VariableDeclarationExpr): 
                                                                variables: 
                                                                    - variable(Type=VariableDeclarator): 
                                                                        initializer(Type=MethodCallExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "removeFirstChild"
                                                                            scope(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "name"
                                                                        name(Type=SimpleName): 
                                                                            identifier: "value"
                                                                        type(Type=ClassOrInterfaceType): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "Node"
                                                        - statement(Type=ExpressionStmt): 
                                                            expression(Type=MethodCallExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "removeChild"
                                                                scope(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "var"
                                                                arguments: 
                                                                    - argument(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "name"
                                                        - statement(Type=ExpressionStmt): 
                                                            expression(Type=VariableDeclarationExpr): 
                                                                variables: 
                                                                    - variable(Type=VariableDeclarator): 
                                                                        initializer(Type=MethodCallExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "srcref"
                                                                            scope(Type=MethodCallExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "assign"
                                                                                scope(Type=NameExpr): 
                                                                                    name(Type=SimpleName): 
                                                                                        identifier: "IR"
                                                                                arguments: 
                                                                                    - argument(Type=NameExpr): 
                                                                                        name(Type=SimpleName): 
                                                                                            identifier: "name"
                                                                                    - argument(Type=NameExpr): 
                                                                                        name(Type=SimpleName): 
                                                                                            identifier: "value"
                                                                            arguments: 
                                                                                - argument(Type=NameExpr): 
                                                                                    name(Type=SimpleName): 
                                                                                        identifier: "name"
                                                                        name(Type=SimpleName): 
                                                                            identifier: "assign"
                                                                        type(Type=ClassOrInterfaceType): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "Node"
                                                        - statement(Type=IfStmt): 
                                                            condition(Type=UnaryExpr): 
                                                                operator: "LOGICAL_COMPLEMENT"
                                                                expression(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "isFor"
                                                                    scope(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "parent"
                                                            thenStmt(Type=BlockStmt): 
                                                                statements: 
                                                                    - statement(Type=ExpressionStmt): 
                                                                        expression(Type=AssignExpr): 
                                                                            operator: "ASSIGN"
                                                                            target(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "assign"
                                                                            value(Type=MethodCallExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "newExpr"
                                                                                scope(Type=NameExpr): 
                                                                                    name(Type=SimpleName): 
                                                                                        identifier: "NodeUtil"
                                                                                arguments: 
                                                                                    - argument(Type=NameExpr): 
                                                                                        name(Type=SimpleName): 
                                                                                            identifier: "assign"
                                                            comment(Type=LineComment): 
                                                                content: " We don't need to wrapped it with EXPR node if it is within a FOR."
                                                        - statement(Type=ExpressionStmt): 
                                                            expression(Type=MethodCallExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "replaceChild"
                                                                scope(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "parent"
                                                                arguments: 
                                                                    - argument(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "var"
                                                                    - argument(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "assign"
                                                comment(Type=LineComment): 
                                                    content: " The removal is easy when there is only one variable in the VAR node."
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "removeChild"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "var"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "name"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "replaceChild"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "parent"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "var"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "name"
                                comment(Type=LineComment): 
                                    content: " Special case when we are in FOR-IN loop."
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "removeVarDeclaration"
                    comment(Type=JavadocComment): 
                        content: "\n   * Tries to remove variable declaration if the variable has been coalesced\n   * with another variable that has already been declared.\n   "
                        contentNode(Type=JavadocContent): 
                            content: ""
                            description(Type=JavadocDescription): 
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "name"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Node"
                - member(Type=ClassOrInterfaceDeclaration): 
                    isInterface: "false"
                    name(Type=SimpleName): 
                        identifier: "LiveRangeChecker"
                    extendedTypes: 
                        - extendedType(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "AbstractCfgNodeTraversalCallback"
                    members: 
                        - member(Type=FieldDeclaration): 
                            variables: 
                                - variable(Type=VariableDeclarator): 
                                    initializer(Type=BooleanLiteralExpr): 
                                        value: "false"
                                    name(Type=SimpleName): 
                                        identifier: "defFound"
                                    type(Type=PrimitiveType): 
                                        type: "BOOLEAN"
                        - member(Type=FieldDeclaration): 
                            variables: 
                                - variable(Type=VariableDeclarator): 
                                    initializer(Type=BooleanLiteralExpr): 
                                        value: "false"
                                    name(Type=SimpleName): 
                                        identifier: "crossed"
                                    type(Type=PrimitiveType): 
                                        type: "BOOLEAN"
                        - member(Type=FieldDeclaration): 
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PRIVATE"
                                - modifier(Type=Modifier): 
                                    keyword: "FINAL"
                            variables: 
                                - variable(Type=VariableDeclarator): 
                                    name(Type=SimpleName): 
                                        identifier: "def"
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "Var"
                        - member(Type=FieldDeclaration): 
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PRIVATE"
                                - modifier(Type=Modifier): 
                                    keyword: "FINAL"
                            variables: 
                                - variable(Type=VariableDeclarator): 
                                    name(Type=SimpleName): 
                                        identifier: "use"
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "Var"
                        - member(Type=ConstructorDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=AssignExpr): 
                                            operator: "ASSIGN"
                                            target(Type=FieldAccessExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "def"
                                                scope(Type=ThisExpr): 
                                            value(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "def"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=AssignExpr): 
                                            operator: "ASSIGN"
                                            target(Type=FieldAccessExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "use"
                                                scope(Type=ThisExpr): 
                                            value(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "use"
                            name(Type=SimpleName): 
                                identifier: "LiveRangeChecker"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "def"
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "Var"
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "use"
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "Var"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "def"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Var"
                            name(Type=SimpleName): 
                                identifier: "getDef"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=EnclosedExpr): 
                                            inner(Type=BinaryExpr): 
                                                operator: "OR"
                                                left(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "isName"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "n"
                                                right(Type=EnclosedExpr): 
                                                    inner(Type=BinaryExpr): 
                                                        operator: "AND"
                                                        left(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "hasChildren"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "n"
                                                        right(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "isName"
                                                            scope(Type=MethodCallExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "getFirstChild"
                                                                scope(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "n"
                            type(Type=PrimitiveType): 
                                type: "BOOLEAN"
                            name(Type=SimpleName): 
                                identifier: "shouldVisit"
                            comment(Type=JavadocComment): 
                                content: "\n     * @return Whether any LiveRangeChecker would be interested in the node.\n     "
                                contentNode(Type=JavadocContent): 
                                    content: ""
                                    description(Type=JavadocDescription): 
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                                - modifier(Type=Modifier): 
                                    keyword: "STATIC"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "n"
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "Node"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=IfStmt): 
                                        condition(Type=BinaryExpr): 
                                            operator: "AND"
                                            left(Type=UnaryExpr): 
                                                operator: "LOGICAL_COMPLEMENT"
                                                expression(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "defFound"
                                            right(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "isAssignTo"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "def"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "n"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "parent"
                                        thenStmt(Type=BlockStmt): 
                                            statements: 
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=AssignExpr): 
                                                        operator: "ASSIGN"
                                                        target(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "defFound"
                                                        value(Type=BooleanLiteralExpr): 
                                                            value: "true"
                                    - statement(Type=IfStmt): 
                                        condition(Type=BinaryExpr): 
                                            operator: "AND"
                                            left(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "defFound"
                                            right(Type=EnclosedExpr): 
                                                inner(Type=BinaryExpr): 
                                                    operator: "OR"
                                                    left(Type=BinaryExpr): 
                                                        operator: "EQUALS"
                                                        left(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "use"
                                                        right(Type=NullLiteralExpr): 
                                                    right(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "isReadFrom"
                                                        arguments: 
                                                            - argument(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "use"
                                                            - argument(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "n"
                                        thenStmt(Type=BlockStmt): 
                                            statements: 
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=AssignExpr): 
                                                        operator: "ASSIGN"
                                                        target(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "crossed"
                                                        value(Type=BooleanLiteralExpr): 
                                                            value: "true"
                            type(Type=VoidType): 
                            name(Type=SimpleName): 
                                identifier: "visit"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "t"
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "NodeTraversal"
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "n"
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "Node"
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "parent"
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "Node"
                            annotations: 
                                - annotation(Type=MarkerAnnotationExpr): 
                                    name(Type=Name): 
                                        identifier: "Override"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=IfStmt): 
                                        condition(Type=BinaryExpr): 
                                            operator: "AND"
                                            left(Type=BinaryExpr): 
                                                operator: "AND"
                                                left(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "isName"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "n"
                                                right(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "equals"
                                                    scope(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "getName"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "var"
                                                    arguments: 
                                                        - argument(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "getString"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "n"
                                            right(Type=BinaryExpr): 
                                                operator: "NOT_EQUALS"
                                                left(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "parent"
                                                right(Type=NullLiteralExpr): 
                                        elseStmt(Type=BlockStmt): 
                                            statements: 
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=VariableDeclarationExpr): 
                                                        variables: 
                                                            - variable(Type=VariableDeclarator): 
                                                                initializer(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "getFirstChild"
                                                                    scope(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "n"
                                                                name(Type=SimpleName): 
                                                                    identifier: "name"
                                                                type(Type=ClassOrInterfaceType): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "Node"
                                                    comment(Type=LineComment): 
                                                        content: " Lastly, any assignmentOP is also an assign."
                                                - statement(Type=ReturnStmt): 
                                                    expression(Type=BinaryExpr): 
                                                        operator: "AND"
                                                        left(Type=BinaryExpr): 
                                                            operator: "AND"
                                                            left(Type=BinaryExpr): 
                                                                operator: "AND"
                                                                left(Type=BinaryExpr): 
                                                                    operator: "NOT_EQUALS"
                                                                    left(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "name"
                                                                    right(Type=NullLiteralExpr): 
                                                                right(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "isName"
                                                                    scope(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "name"
                                                            right(Type=MethodCallExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "equals"
                                                                scope(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "getName"
                                                                    scope(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "var"
                                                                arguments: 
                                                                    - argument(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "getString"
                                                                        scope(Type=NameExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "name"
                                                        right(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "isAssignmentOp"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "NodeUtil"
                                                            arguments: 
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "n"
                                        thenStmt(Type=BlockStmt): 
                                            statements: 
                                                - statement(Type=IfStmt): 
                                                    condition(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "isParamList"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "parent"
                                                    elseStmt(Type=IfStmt): 
                                                        condition(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "isVar"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "parent"
                                                        thenStmt(Type=BlockStmt): 
                                                            statements: 
                                                                - statement(Type=ReturnStmt): 
                                                                    expression(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "hasChildren"
                                                                        scope(Type=NameExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "n"
                                                                    comment(Type=LineComment): 
                                                                        content: " assigning to that name."
                                                    thenStmt(Type=BlockStmt): 
                                                        statements: 
                                                            - statement(Type=ReturnStmt): 
                                                                expression(Type=BooleanLiteralExpr): 
                                                                    value: "true"
                                                                comment(Type=LineComment): 
                                                                    content: " In a function declaration, the formal parameters are assigned."
                                                - statement(Type=ReturnStmt): 
                                                    expression(Type=BooleanLiteralExpr): 
                                                        value: "false"
                                                    comment(Type=LineComment): 
                                                        content: " Definitely a read."
                            type(Type=PrimitiveType): 
                                type: "BOOLEAN"
                            name(Type=SimpleName): 
                                identifier: "isAssignTo"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PRIVATE"
                                - modifier(Type=Modifier): 
                                    keyword: "STATIC"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "var"
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "Var"
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "n"
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "Node"
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "parent"
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "Node"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=BinaryExpr): 
                                            operator: "AND"
                                            left(Type=BinaryExpr): 
                                                operator: "AND"
                                                left(Type=BinaryExpr): 
                                                    operator: "AND"
                                                    left(Type=BinaryExpr): 
                                                        operator: "NOT_EQUALS"
                                                        left(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "name"
                                                        right(Type=NullLiteralExpr): 
                                                    right(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "isName"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "name"
                                                right(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "equals"
                                                    scope(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "getName"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "var"
                                                    arguments: 
                                                        - argument(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "getString"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "name"
                                            right(Type=UnaryExpr): 
                                                operator: "LOGICAL_COMPLEMENT"
                                                expression(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "isVarOrSimpleAssignLhs"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "NodeUtil"
                                                    arguments: 
                                                        - argument(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "name"
                                                        - argument(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "getParent"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "name"
                            type(Type=PrimitiveType): 
                                type: "BOOLEAN"
                            name(Type=SimpleName): 
                                identifier: "isReadFrom"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PRIVATE"
                                - modifier(Type=Modifier): 
                                    keyword: "STATIC"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "var"
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "Var"
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "name"
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "Node"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                        - modifier(Type=Modifier): 
                            keyword: "STATIC"
...
2020-03-19 23:15:53 DEBUG FileParser:139 - while stmt: while (t.getScope().isDeclared(pseudoName, true)) {
    pseudoName += "$";
}, vars: [t, getScope, isDeclared, pseudoName, pseudoName], range: (line 199,col 7), (line 201,col 7)
